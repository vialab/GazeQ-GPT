import { useEffect } from "react";
import * as React from "react";
import * as d3 from "d3";
import "../assets/css/Header.css";

export default function Header({ children }) {
    useEffect(() => {
        let path1 = "M 493.75 95.3125 C 493.75 120.2875 459.8125 139.3844 394.375 151.8719 C 358.0938 158.8187 305.5938 165.625 259.375 165.625 C 178.4688 165.625 125.875 161.7719 83.7813 143.125 C 58.4688 131.875 25 109.9375 25 95.3125 C 25 76.0469 41.5 55.7687 83.3125 43.0563 S 194.125 25 259.375 25 C 348.4375 25 416.5938 39.9063 456.25 61.8719 C 473.875 71.8 493.75 83.1906 493.75 95.3125 Z";
        let path2 = "M 514 101.5 C 506.5 125.8 448 140.2 409 151 C 341.5 170.8 296.5 167.65 245.5 164.05 C 167.5 157.75 169 157.3 112 144.7 C 61 131.65 49 125.8 41.5 103.3 C 32.5 80.8 31 56.05 85 39.4 S 181 23.2 271 24.1 C 359.5 24.55 421 36.7 464.5 49.3 C 512.5 65.05 503.5 73.6 512.5 87.55 Z";
        let path3 = "M 481 102.4 C 460 133 433 137.05 386.5 148.75 C 314.5 169 311.5 165.85 250 169.9 C 167.5 169.45 139 170.35 77.5 153.7 C 31 131.2 40 130.75 31 104.65 C 32.5 80.8 59.5 59.2 118 42.1 S 202 24.1 314.5 19.15 C 410.5 17.8 445 32.2 464.5 49.3 C 482.5 69.1 485.5 68.2 485.5 86.2 Z";
        let path = d3.select(".background").select("path");

        d3.select(".background")
        .on("mouseenter", () => {
            d3.select(".graphic")
            .transition()
            .attrTween("transform", () => {
                return d3.interpolate(d3.select(".graphic").attr("transform"), "scale(1.05)");
            });

            function animate() {
                path
                .transition()
                .duration(1000)
                .ease(d3.easeLinear)
                .attrTween("d", () => {
                    return d3.interpolate(path.attr("d"), path2);
                })
                .on("end", () => {
                    path
                    .transition()
                    .duration(1000)
                    .ease(d3.easeLinear)
                    .attrTween("d", () => {
                        return d3.interpolate(path2, path3);
                    }).on("end", () => {
                        path
                        .transition()
                        .duration(1000)
                        .ease(d3.easeLinear)
                        .attrTween("d", () => {
                            return d3.interpolate(path3, path1);
                        }).on("end", () => {
                            animate();
                        })
                    })
                });
            }
            animate();
        })
        .on("mouseleave", () => {
            path
            .transition()
            .duration(1000)
            .attrTween("d", () => {
                return d3.interpolate(path.attr("d"), path1);
            })

            d3.select(".graphic")
            .transition()
            .attrTween("transform", () => {
                return d3.interpolate(d3.select(".graphic").attr("transform"), "scale(1)");
            });
        });

        return () => {
            d3.select(".background").on("mouseenter mouseleave", null);
        }
    }, []);
    
    return (
        <header id={"header"}>
            <svg 
                viewBox="0 0 512.5 200"
                className={"svg"}
            >
                <g className="background" fill="#003e6b" style={{ pointerEvents: "all" }}>
                    <path d="M 493.75 95.3125 C 493.75 120.2875 459.8125 139.3844 394.375 151.8719 C 358.0938 158.8187 305.5938 165.625 259.375 165.625 C 178.4688 165.625 125.875 161.7719 83.7813 143.125 C 58.4688 131.875 25 109.9375 25 95.3125 C 25 76.0469 41.5 55.7687 83.3125 43.0563 S 194.125 25 259.375 25 C 348.4375 25 416.5938 39.9063 456.25 61.8719 C 473.875 71.8 493.75 83.1906 493.75 95.3125 Z"></path>
                </g>
                <g className={"graphic"}>
                    <g fill="#acd2ea">
                        <path d="M 127.1994 49.2 C 100.6897 49.2 79.2 70.6897 79.2 97.1994 C 79.2 112.3268 86.2052 125.8114 97.1404 134.6098 L 79.2 145.2001 H 127.1994 C 153.7091 145.2001 175.2 123.7104 175.2 97.1995 C 175.2 70.6898 153.7066 49.2001 127.1994 49.2001 Z M 127.1982 140.929 H 95.1305 L 105.2812 135.0347 C 92.2438 127.4642 83.47 113.3615 83.47 97.1995 C 83.47 73.0483 103.0471 53.4713 127.1982 53.4713 C 151.3494 53.4713 170.9278 73.0484 170.9278 97.1995 C 170.9278 121.3495 151.3494 140.9291 127.1982 140.9291 Z M 153.352 97.1994 L 140.2763 109.009 C 133.0531 115.5326 121.3445 115.5326 114.1225 109.009 L 101.0468 97.1994 L 114.1225 85.3898 C 121.3445 78.8687 133.053 78.8687 140.2763 85.3898 L 153.352 97.1994 Z M 137.2614 88.1116 C 131.7046 83.0929 122.6944 83.0929 117.1375 88.1116 C 111.5795 93.1302 111.5795 101.2685 117.1375 106.2871 C 122.6944 111.3058 131.7058 111.3058 137.2614 106.2871 C 142.8208 101.2673 142.8208 93.1302 137.2614 88.1116 Z M 134.9719 97.1994 C 134.9719 101.4926 131.4928 104.9694 127.1994 104.9694 C 122.9062 104.9694 119.4269 101.4926 119.4269 97.1994 C 119.4269 92.9062 122.906 89.4282 127.1994 89.4282 S 134.9719 92.9062 134.9719 97.1994 Z M 131.3966 93.8076 C 131.3966 93.3236 131.2218 92.8852 130.9422 92.5354 C 130.8289 92.8901 130.5025 93.1487 130.1084 93.1487 C 129.6245 93.1487 129.2316 92.7558 129.2316 92.2718 C 129.2316 92.0846 129.2932 91.911 129.3929 91.7669 C 129.3781 91.7669 129.3658 91.7632 129.351 91.7632 C 128.2217 91.7632 127.3054 92.6795 127.3054 93.8088 C 127.3054 94.9381 128.2217 95.8556 129.351 95.8556 C 130.4816 95.8544 131.3966 94.9381 131.3966 93.8075 Z"></path>
                    </g>
                    <g fill="#ffffff">
                        <path d="M 205.1165 115.9478 C 194.7976 115.9478 187.2 108.821 187.2 97.6601 C 187.2 86.3512 194.9702 79.2 205.4878 79.2 C 212.3918 79.2 218.1082 82.2437 221.2264 87.6136 L 214.7182 91.0781 C 212.8374 87.4157 209.4721 85.6588 205.4879 85.6588 C 199.3014 85.6588 194.6491 89.915 194.6491 97.4873 C 194.6491 104.7872 199.0044 109.4891 205.76 109.4891 C 210.338 109.4891 214.5449 107.2124 215.5595 101.991 L 205.7849 101.991 L 205.7849 96.0274 L 222.5878 96.0274 L 222.5878 115.4528 L 216.7476 115.4528 L 216.7476 110.5036 C 214.4462 113.8938 210.5858 115.9477 205.1171 115.9477 Z M 255.4316 115.453 L 252.8333 108.0786 L 237.8131 108.0786 L 235.2148 115.453 L 227.6177 115.453 L 240.783 79.6946 L 249.8648 79.6946 L 263.0302 115.453 L 255.4331 115.453 Z M 239.9908 101.8669 L 250.6564 101.8669 L 245.3359 86.6972 Z M 276.1255 108.8952 L 293.2996 108.8952 L 293.2996 115.453 L 267.2426 115.453 L 267.2426 109.5881 L 284.1937 86.2273 L 267.268 86.2273 L 267.268 79.6944 L 292.979 79.6944 L 292.979 85.5592 Z M 322.0607 86.2285 L 308.7966 86.2285 L 308.7966 94.3452 L 320.5508 94.3452 L 320.5508 100.804 L 308.7966 100.804 L 308.7966 108.8958 L 322.0607 108.8958 L 322.0607 115.4536 L 301.3238 115.4536 L 301.3238 79.6952 L 322.0607 79.6952 L 322.0607 86.2283 Z"></path>
                    </g>
                    <g fill="#f27023">
                        <path d="M 346.391 115.9478 C 336.0721 115.9478 328.4746 108.821 328.4746 97.6601 C 328.4746 86.3512 336.2448 79.2 346.7623 79.2 C 353.6664 79.2 359.3827 82.2437 362.5009 87.6136 L 355.9927 91.0781 C 354.112 87.4157 350.7466 85.6588 346.7624 85.6588 C 340.576 85.6588 335.9237 89.915 335.9237 97.4873 C 335.9237 104.7872 340.279 109.4891 347.0346 109.4891 C 351.6126 109.4891 355.8194 107.2124 356.834 101.991 L 347.0594 101.991 L 347.0594 96.0274 L 363.8623 96.0274 L 363.8623 115.4528 L 358.0222 115.4528 L 358.0222 110.5036 C 355.7208 113.8938 351.8604 115.9477 346.3916 115.9477 Z M 387.6497 79.6946 C 394.6528 79.6946 399.008 84.8912 399.008 91.251 C 399.008 97.7591 394.6528 102.6341 387.6497 102.6341 L 380.2012 102.6341 L 380.2012 115.4522 L 372.7774 115.4522 L 372.7774 79.6939 L 387.6493 79.6939 Z M 386.4119 96.4226 C 390.1237 96.4226 391.8559 94.3687 391.8559 91.1518 C 391.8559 88.0585 390.1237 85.9056 386.4119 85.9056 L 380.2007 85.9056 L 380.2007 96.4226 L 386.4119 96.4226 Z M 427.2 79.6946 L 427.2 86.2276 L 418.7122 86.2276 L 418.7122 115.452 L 411.3626 115.452 L 411.3626 86.2276 L 402.8252 86.2276 L 402.8252 79.6946 L 427.1996 79.6946 Z"></path>
                    </g>
                </g>
            </svg>
            { 
                children instanceof Array ? children.map((child, index) => {
                    return React.cloneElement(child, { className: "headerlinks", key: index });
                }) : 
                React.cloneElement(children, { className: "headerlinks" })
            }
        </header>
    )
}